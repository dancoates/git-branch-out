#!/bin/bash

printf "\n"

## Display usage information
usage () {
    printf "# USAGE\n"
    printf "(square brackets means optional)\n"
    printf "\n** Inital setup mode **\n"
    echo 'git-branch-out [-b "buildscript"] <repo url> [<folder>]'
    printf "\n"
    echo "-OR-"
    printf "\n** Update mode **\n"
    echo 'git-branch-out [-b "buildscript"] [<repo folder>] [<folder>]'
    printf "\n"

    exit
}

die () {
    echo $@
    exit 
}

#Vars
initdir=$(pwd)
mode=
dir=
url=
script=
cmd=
queueflag=


## Get the exact command that was passed so it can be queued if needed
for var in "$@"
do
    if [[ $var =~ " " ]]
        then
        var=\"$var\"
    fi
    cmd="$cmd $var"
done
cmd="$0 -q $cmd"


# Check for queue and build flags flag
while getopts "qb:" OPTION
do
    case $OPTION in
    q)
        queueflag=1
    ;;
    b)
        script="$OPTARG"
    ;;    
    esac
done
shift $(($OPTIND-1))


# Check the type of argument passed
if [ $# -eq 2 ]
    then
    if [[ "$1" =~ "://" || "$1" =~ "git@" ]]
    then
        url=$1
        mode=initial
        dir=$2
    else
        usage
    fi
elif [ $# -eq 1 ]
    then
    if [[ "$1" =~ "://" || "$1" =~ "git@" ]]
    then
        mode=initial
        url=$1
        dir="."
    else
        mode=update
        dir=$1
    fi
elif [ $# -eq 0 ]
    then
    if [ -d .git ]
    then
        mode=update
        dir="."
    else
        mode=update
        dir=".repo"
    fi
else
    usage
fi

## Git New Workdir Script
## https://github.com/git/git/blob/master/contrib/workdir/git-new-workdir

git_new_workdir() {
    orig_git=$1
    new_workdir=$2
    branch=$3

    # want to make sure that what is pointed to has a .git directory ...
    git_dir=$(cd "$orig_git" 2>/dev/null &&
      git rev-parse --git-dir 2>/dev/null) ||
      die "Not a git repository: \"$orig_git\""

    case "$git_dir" in
    .git)
        git_dir="$orig_git/.git"
        ;;
    .)
        git_dir=$orig_git
        ;;
    esac

    # don't link to a configured bare repository
    isbare=$(git --git-dir="$git_dir" config --bool --get core.bare)
    if test ztrue = z$isbare
    then
        die "\"$git_dir\" has core.bare set to true," \
            " remove from \"$git_dir/config\" to use $0"
    fi

    # don't link to a workdir
    if test -h "$git_dir/config"
    then
        die "\"$orig_git\" is a working directory only, please specify" \
            "a complete repository."
    fi

    # don't recreate a workdir over an existing repository
    if test -e "$new_workdir"
    then
        die "destination directory '$new_workdir' already exists."
    fi

    # make sure the links use full paths
    git_dir=$(cd "$git_dir"; pwd)

    # create the workdir
    mkdir -p "$new_workdir/.git" || die "unable to create \"$new_workdir\"!"

    # create the links to the original repo.  explicitly exclude index, HEAD and
    # logs/HEAD from the list since they are purely related to the current working
    # directory, and should not be shared.
    for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn
    do
        case $x in
        */*)
            mkdir -p "$(dirname "$new_workdir/.git/$x")"
            ;;
        esac
        ln -s "$git_dir/$x" "$new_workdir/.git/$x"
    done

    # now setup the workdir
    cd "$new_workdir"
    # copy the HEAD from the original repository as a default branch
    cp "$git_dir/HEAD" .git/HEAD
    # checkout the branch (either the same as HEAD from the original repository, or
    # the one that was asked for)
    git checkout -f $branch
}


mkdir -p $dir;
cd $dir;
if [ $mode = initial ]
    then
    printf "####################\n"
    printf "# Inital Setup Mode\n"
    printf "#################### \n \n"
    git clone --no-checkout $url .repo;
    cd .repo;
    dir=$(pwd)
    printf "** Fanning out branches **\n"
    printf "** Fetching latest changes **\n\n"
    git fetch
    git for-each-ref --shell refs/remotes/origin/ --format="branch=%(refname:short)" | \
    while read entry
    do
        cd $dir
        eval "$entry"
        shortbranch=${branch/origin\//}
        if [ "$shortbranch" != "HEAD" ]
            then
            echo "Fanning branch $shortbranch"
            git_new_workdir . ../$shortbranch $shortbranch
            if [ ! -z $script ]
                then
                echo "Running Build Script"
                eval $script
            fi
            printf "\n"
        fi
    done
elif [ $mode = update ]
    then
    printf "#################\n"
    printf "# Update Mode\n"
    printf "#################\n \n"
    if [ ! -d .git ]
    then
        cd .repo
    fi
    dir=$(pwd)

    ## Check if already running and if so, add to queue and exit
    if [[ -f ../.queue && -z $queueflag ]]
        then
        echo "Already running - Adding to queue and exiting"
        echo "cd $initdir && $cmd" >> ../.queue
        exit
    fi

    touch ../.queue

    printf "** Fetching latest changes **\n\n"
    git fetch --all
    to_prune="`git remote prune origin --dry-run 2>/dev/null`"
    prune="`echo $to_prune | grep -o "\[would prune\].*"` *"

    git for-each-ref --shell refs/remotes/origin/ --format="branch=%(refname:short)" | \
    while read entry
    do
        cd $dir
        eval "$entry"
        shortbranch=${branch/origin\//}
        if [ "$shortbranch" != "HEAD" ]
            then
            if [ ! -d ../$shortbranch ]
                then
                echo "Adding new branch $shortbranch"
                git_new_workdir . ../$shortbranch $shortbranch
                if [ ! -z $script ]
                    then
                    echo "Running Build Script"
                    eval $script
                fi
            else
                if [[ "$prune" =~ "/$shortbranch *" ]]
                    then
                    echo "Deleting branch: $shortbranch"
                    git branch -D $shortbranch
                    rm -r ../$shortbranch
                    echo "$shortbranch will be pruned from remotes as well..."
                else
                    echo "Updating branch $shortbranch"
                    cd ../$shortbranch
                    git clean -fd
                    merge_result=$(git merge -s recursive -X theirs origin/$shortbranch)
                    echo -e "$merge_result"
                    if [[ ! -z $script && "$merge_result" != "Already up-to-date." ]]
                        then
                        echo "Running Build Script"
                        eval $script
                    fi
                fi
            fi
            printf "\n"
        fi
    done
    git remote prune origin

    cd $dir

    ## Check to see if anything has been added to the queue
    ## If so, run the script in the queue
    ## If not, delete the queue file
    queue=$(head -n 1 ../.queue)
    if [[ ! -z $queue ]]
        then
        sed -i -e "1d" ../.queue
        echo "Running next in queue"
        eval $queue
    else
        echo "Last in line, removing queue file"
        rm ../.queue
    fi
fi









