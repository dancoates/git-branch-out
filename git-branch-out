#!/bin/bash
## Display usage information
usage () {
    echo "usage:" $@
    exit
}

die () {
    echo $@
    exit 
}

#Vars
mode=
dir=
url=

# Check the type of argument passed
if [ $# -eq 2 ]
    then
    if [[ "$1" =~ "://" || "$1" =~ "git@" ]]
    then
        echo "Param is a URL and a path has been passed"
        url=$1
        mode=initial
        dir=$2
    else
        usage
        echo "Incorrect params"
    fi
elif [ $# -eq 1 ]
    then
    if [[ "$1" =~ "://" || "$1" =~ "git@" ]]
    then
        echo "Param is a URL"
        mode=initial
        url=$1
        dir="."
    else
        mode=update
        dir=$1
        echo "Param is a path"
    fi
elif [ $# -eq 0 ]
    then
    status=`git status 2>/dev/null`
    if [ "$status" =~ "fatal" ]
    then
        echo "Not a git repository"
        dir="repo"
    else
        mode=update
        dir="."
        echo "Currently in git directory"
    fi
else
    usage
fi


## Git New Workdir Script

git_new_workdir() {
    orig_git=$1
    new_workdir=$2
    branch=$3

    # want to make sure that what is pointed to has a .git directory ...
    git_dir=$(cd "$orig_git" 2>/dev/null &&
      git rev-parse --git-dir 2>/dev/null) ||
      die "Not a git repository: \"$orig_git\""

    case "$git_dir" in
    .git)
        git_dir="$orig_git/.git"
        ;;
    .)
        git_dir=$orig_git
        ;;
    esac

    # don't link to a configured bare repository
    isbare=$(git --git-dir="$git_dir" config --bool --get core.bare)
    if test ztrue = z$isbare
    then
        die "\"$git_dir\" has core.bare set to true," \
            " remove from \"$git_dir/config\" to use $0"
    fi

    # don't link to a workdir
    if test -h "$git_dir/config"
    then
        die "\"$orig_git\" is a working directory only, please specify" \
            "a complete repository."
    fi

    # don't recreate a workdir over an existing repository
    if test -e "$new_workdir"
    then
        die "destination directory '$new_workdir' already exists."
    fi

    # make sure the links use full paths
    git_dir=$(cd "$git_dir"; pwd)

    # create the workdir
    mkdir -p "$new_workdir/.git" || die "unable to create \"$new_workdir\"!"

    # create the links to the original repo.  explicitly exclude index, HEAD and
    # logs/HEAD from the list since they are purely related to the current working
    # directory, and should not be shared.
    for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn
    do
        case $x in
        */*)
            mkdir -p "$(dirname "$new_workdir/.git/$x")"
            ;;
        esac
        ln -s "$git_dir/$x" "$new_workdir/.git/$x"
    done

    # now setup the workdir
    cd "$new_workdir"
    # copy the HEAD from the original repository as a default branch
    cp "$git_dir/HEAD" .git/HEAD
    # checkout the branch (either the same as HEAD from the original repository, or
    # the one that was asked for)
    git checkout -f $branch
}





mkdir -p $dir;
cd $dir;
pwd;

if [ $mode = initial ]
    then
    git clone --no-checkout  --no-single-branch --depth 1 $url repo;
    cd repo;
fi


dir=$(pwd)
echo "Fanning out branches"
echo "Updating"
git fetch
git for-each-ref --shell refs/remotes/origin/ --format="branch=%(refname:short)" | \
while read entry
do
    cd $dir
    eval "$entry"
    shortbranch=${branch/origin\//}
    echo "Fanning branch $shortbranch"
    git_new_workdir . ../$shortbranch $shortbranch

done




